# Copyright 2023 Cloudera, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

# TODO on Knox Gateway
# Install snapd and then certbot, following standard procedures
  # DONE - Create as a role to install
  # DONE - Run certbot the first time
# DONE - Rework the renewal and CSR config to better with the proxy needs
# Create a PCKS12 keystore using the resulting cert -- cert identity should be 'gateway-identity'
#   and store passcode the Master Key for Knox (for now)
#   Should also store it as knox:knox 0644 in /var/lib/knox/gateway/data/security/keystores/
  # SKIP - Create a new role destined for cloudera.exe
  # Add procedure to update existing keystore
# Update CM for the keystore (and potentially passcode)
  # PUT /api/v31/clusters/PVC-Base/services/knox/roleConfigGroups/knox-KNOX_GATEWAY-BASE/config
  # {
  #   "items": [
  #     {
  #       "name": "ssl_server_keystore_location",
  #       "value": ""
  #     }
  #   ]
  # }
# Update Knox for the service whitelist due to the embedded IP (note that the domain is configurable)
  # PUT /api/v31/clusters/PVC-Base/services/knox/roleConfigGroups/knox-KNOX_GATEWAY-BASE/config
  # {
  #   "items": [
  #     {
  #       "name": "gateway_dispatch_whitelist",
  #       "value": "^\\/.*$;^https?:\\/\\/(.+\\.pvc\\.cloudera-labs\\.com):[0-9]+\\/?.*$"
  #     }
  #   ]
  # }
# Update the frontend_url for the CM config
  # PUT /api/v31/cm/config
  # {
  #   "items": [
  #     {
  #       "name": "frontend_url",
  #       "value": "scheme://host:port only"
  #     }
  #   ]
  # }

- name: Postfix CDP Private Cloud clusters
  hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    definition_path: "./"
  tasks:
    - name: Set of deployment variables from definition.yml
      ansible.builtin.include_role:
        name: cloudera.exe.init_deployment
        public: yes
      when: init__completed is undefined

    - name: Prepare inventory for PvC Plays
      ansible.builtin.include_role:
        name: cloudera.exe.init_deployment
        public: yes
        tasks_from: prep_pvc.yml
  tags:
    - always

- name: Init run tasks for all nodes
  hosts: all
  gather_facts: no
  tasks:
    - name: Group hosts by host template and TLS
      ansible.builtin.include_role:
        name: cloudera.cluster.deployment.groupby

    - name: Check connectivity to Inventory
      ansible.builtin.wait_for_connection:
  tags:
    - always

- name: Postfix clusters for CDP Private Cloud
  ansible.builtin.import_playbook: cloudera.exe.pvc_base_postfix.yml

- name: Enable Lets Encrypt for Knox Gateway
  hosts: knox_gateway
  gather_facts: no
  become: yes
  roles:
    - name: cloudera.cluster.infrastructure.ca_common
  tags:
    - certbot
  vars:
    base_dir_security_le: "{{ base_dir_security }}/letsencrypt"
  tasks:
    - name: Set up the Lets Encrypt directory
      ansible.builtin.file:
        path: "{{ base_dir_security_le }}"
        state: directory
        mode: "0700"
      
    - name: Install the Lets Encrypt certificate renewal script
      ansible.builtin.template:
        dest: "{{ base_dir_security_le }}/knox-renew-tls.sh"
        src: knox-renew-tls.sh.j2
        mode: "0755"

    - name: Install the Lets Encrypt certificate signing request configuration
      ansible.builtin.template:
        dest: "{{ base_dir_security_le }}/knox.cnf"
        src: knox.cnf.j2
        mode: "0644"

    - name: Set up a daily cron job to check the Lets Encrypt certificate
      ansible.builtin.cron:
        name: letsencrypt renewal
        hour: "2"
        user: root
        job: "{{ base_dir_security_le }}/knox-renew-tls.sh"
        cron_file: letsencrypt_renewal

    - name: Run the Lets Encrypt certificate renewal script
      ansible.builtin.command: "{{ base_dir_security_le }}/knox-renew-tls.sh --first-time"

    